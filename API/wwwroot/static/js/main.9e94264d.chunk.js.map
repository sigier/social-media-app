{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/ReuseTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/ReuseTextArea.tsx","app/common/options/categoryOptions.ts","app/common/form/ReuseSelectInput.tsx","app/common/form/ReuseDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","activities","list","params","console","log","activityDetails","id","create","activity","update","attend","account","current","login","user","register","profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegister","Map","chosenActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivity","getActivity","setActivity","runInAction","setLoadingInitial","loadActivities","axiosParams","result","setPagination","state","createActivity","userStore","attendee","newActivity","hostUsername","attendees","updateActivity","updatedActivity","deleteActivity","updateAttendance","isGoing","filter","cancelActivityToggle","isCancelled","clearChosenActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","format","some","isHost","host","find","x","Date","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","activityStore","followingCount","loadFollowings","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","ReuseTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","LoadingComponent","Dimmer","ReuseTextArea","categoryOptions","ReuseSelectInput","helpers","Select","clearable","options","event","setValue","onBlur","setTouched","ReuseDateInput","selected","useHistory","nullable","useParams","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whitespce","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","length","relaxed","divided","Extra","NotFound","Inline","primary","message","details","Modal","onClose","Tab","Pane","itemsPerRow","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","widths","getCroppedCanvas","toBlob","blob","isCurrentUser","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","panes","menuItem","menu","menuPosition","onTabChange","activeIndex","Statistic","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","path","HomePage","hideProgressBar","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.9e94264d.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n};\r\n\r\n\r\nexport class PaginatedResult<T> {\r\n\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n\r\n};\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        \r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { PaginatedResult } from '../models/pagination';\r\nimport { Photo, Profile } from '../models/profile';\r\nimport { User, UserFormValues } from '../models/user';\r\nimport { store } from '../stores/store';\r\n\r\n\r\nconst sleep = (delay: number) => {\r\n\r\n    return new Promise((resolve) => \r\n    \r\n        setTimeout(resolve, delay)\r\n    );\r\n};\r\n\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\n\r\naxios.interceptors.request.use(config => {\r\n\r\n    const token = store.commonStore.token;\r\n\r\n    if (token) {\r\n\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n\r\n    return config;\r\n});\r\n\r\n\r\naxios.interceptors.response.use(async response =>  {\r\n\r\n    const pagination = response.headers['pagination'];\r\n\r\n    if (pagination){\r\n\r\n        response.data = new PaginatedResult(response.data,\r\n            JSON.parse(pagination));\r\n\r\n        return response as AxiosResponse<PaginatedResult<any>>\r\n    }\r\n\r\n    if (process.env.NODE_ENV==='development') {\r\n\r\n        await sleep(1000);\r\n    }\r\n\r\n    \r\n\r\n    return response;\r\n\r\n}, (error: AxiosError) => {\r\n\r\n    const { data, status, config } = error.response!;\r\n\r\n    switch (status){\r\n        \r\n        case 400:\r\n             if (typeof data ==='string') {\r\n                    toast.error(data);\r\n             }\r\n\r\n             if (config.method==='get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('not-found');\r\n             }\r\n\r\n             if (data.errors) {\r\n                 const modalStateErrors = []; \r\n\r\n                 for (const key in data.errors) {\r\n\r\n                    if (data.errors[key]){\r\n\r\n                        modalStateErrors.push(data.errors[key]);\r\n                    }\r\n                 }\r\n\r\n                 throw modalStateErrors.flat();\r\n             } \r\n             break;\r\n        case 401:\r\n            toast.error(\"unathorized\");\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n\r\n    return Promise.reject(error);\r\n    \r\n});\r\n\r\n\r\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\r\n\r\n\r\nconst  requests = {\r\n    get: <T> (url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T> (url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T> (url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    delete: <T> (url: string) => axios.delete<T>(url).then(responseBody),\r\n};\r\n\r\nconst activities = {\r\n\r\n    list: \r\n     (params: URLSearchParams) => {\r\n        const a = axios.get<PaginatedResult<Activity[]>>('/activities', { params }).then(responseBody);\r\n        console.log(a);\r\n\r\n        return a;\r\n    },\r\n      \r\n    activityDetails: \r\n     (id :string) => requests.get<Activity>(`/activities/${id}`),\r\n    create:\r\n     (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\r\n    update: \r\n     (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity), \r\n    delete:\r\n     (id :string) => requests.delete<void>(`/activities/${id}`), \r\n    attend:\r\n     (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\r\n};\r\n\r\n\r\nconst account = {\r\n\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues)  => requests.post<User>('/account/login/', user),\r\n    register: (user: UserFormValues)  => requests.post<User>('/account/register/', user),\r\n};\r\n\r\nconst profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: { 'Content-type': 'multipart/form-data' }\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.delete(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put('/profiles', profile),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) => \r\n                    requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n\r\n    activities,\r\n    account,\r\n    profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity { \r\n id: string;\r\n title: string;\r\n date: Date | null;\r\n description: string;\r\n category: string;\r\n city: string;\r\n venue: string;\r\n hostUsername: string;\r\n isCancelled: boolean;\r\n isGoing: boolean;\r\n isHost: boolean;\r\n host?: Profile;\r\n attendees: Profile[];\r\n};\r\n\r\nexport class Activity implements Activity {\r\n\r\n    constructor(init?: ActivityFormValues) {\r\n\r\n        Object.assign(this, init);\r\n    }\r\n\r\n};\r\n\r\n\r\nexport class ActivityFormValues {\r\n\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n\r\n    constructor(activity?: ActivityFormValues) \r\n    {\r\n        if (activity) {\r\n\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.category = activity.category;\r\n            this.description = activity.description;\r\n            this.date = activity.date;\r\n            this.venue = activity.venue;\r\n            this.city = activity.city;\r\n\r\n\r\n        }\r\n\r\n    }\r\n}","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    photos?: Photo[];\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n}\r\n\r\nexport class Profile implements Profile {\r\n\r\n    constructor(user: User) {\r\n\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n\r\n};\r\n\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}","import format from \"date-fns/format\";\r\nimport { makeAutoObservable, reaction } from \"mobx\";\r\nimport { runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\n\r\nexport default class ActivityStore {\r\n    \r\n    activityRegister = new Map<string, Activity>();\r\n\r\n    chosenActivity: Activity | undefined = undefined;\r\n\r\n    editMode = false;\r\n\r\n    loading = false;\r\n\r\n    loadingInitial = false;\r\n\r\n    pagination: Pagination | null = null;\r\n\r\n    pagingParams = new PagingParams();\r\n\r\n    predicate = new Map().set('all', true);\r\n\r\n    \r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegister.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n\r\n        const resetPredicate = () => {\r\n\r\n            this.predicate.forEach((value, key) => {\r\n\r\n                if (key === 'startDate') {\r\n\r\n                    this.predicate.delete(key);\r\n                }\r\n            });\r\n        };\r\n\r\n        switch(predicate) {\r\n            case \"all\":\r\n                resetPredicate();\r\n                this.predicate.set(\"all\", true);\r\n                break;\r\n            case \"isGoing\":\r\n                resetPredicate();\r\n                this.predicate.set(\"isGoing\", true);\r\n                break;\r\n            case \"isHost\":\r\n                resetPredicate();\r\n                this.predicate.set(\"isHost\", true);\r\n                break;\r\n            case \"startDate\":\r\n                this.predicate.delete(\"startDate\")\r\n                this.predicate.set(\"startDate\", value)\r\n                break;\r\n        }\r\n    };\r\n\r\n    get axiosParams() {\r\n\r\n        const params = new URLSearchParams();\r\n\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n\r\n        this.predicate.forEach((value, key) => {\r\n\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString())\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n\r\n        return params;\r\n    }\r\n\r\n\r\n    get activitiesByDate(){\r\n\r\n        return Array.from(this.activityRegister.values()).sort((a,b) => \r\n\r\n            (a.date!.getTime()) - (b.date!.getTime())\r\n        );\r\n    }\r\n\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n\r\n                const date = format(activity.date!, 'dd MMM yyyy');\r\n                \r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                \r\n                return activities;\r\n\r\n            }, {} as {[key: string]: Activity[]})\r\n        )\r\n    };\r\n\r\n\r\n    loadActivity = async (id: string) => {\r\n\r\n        let activity = this.getActivity(id);\r\n\r\n        if (activity) {\r\n\r\n            this.chosenActivity = activity;\r\n\r\n            return activity;\r\n\r\n        } else {\r\n\r\n            this.loadingInitial = true;\r\n\r\n            try {\r\n\r\n                activity = await agent.activities.activityDetails(id);\r\n\r\n                this.setActivity(activity);\r\n\r\n                runInAction(() => {\r\n\r\n                    this.chosenActivity = activity;\r\n                });\r\n\r\n                this.setLoadingInitial(false);\r\n\r\n                return activity;\r\n                \r\n            } catch (error) {\r\n\r\n                console.log(error);\r\n\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private getActivity(id: string) {\r\n\r\n        return this.activityRegister.get(id);\r\n    }\r\n\r\n\r\n    private setActivity(activity: Activity) {\r\n\r\n        const user = store.userStore.user;\r\n\r\n        if (user) {\r\n            \r\n            activity.isGoing = activity.attendees!.some(\r\n                a => a.username === user.username\r\n            );\r\n\r\n            activity.isHost = activity.hostUsername === user.username;\r\n\r\n            activity.host = activity.attendees?.find (\r\n\r\n                x => x.username === activity.hostUsername\r\n            );\r\n        }\r\n\r\n\r\n        activity.date = new Date(activity.date!);\r\n        \r\n        this.activityRegister.set(activity.id, activity);\r\n    }   \r\n\r\n\r\n    loadActivities = async () => {\r\n\r\n        this.loadingInitial = true;\r\n\r\n        try {\r\n            const result = await agent.activities.list(this.axiosParams);\r\n\r\n            result.data.forEach(activity => {\r\n\r\n                this.setActivity(activity);\r\n\r\n            });\r\n\r\n            this.setPagination(result.pagination);\r\n\r\n            this.setLoadingInitial(false);\r\n\r\n        } catch (error) {\r\n\r\n            console.log(error);\r\n            \r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n\r\n        this.pagination = pagination;\r\n    };\r\n\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n\r\n        const user = store.userStore.user;\r\n\r\n        const attendee = new Profile(user!);\r\n\r\n        try {\r\n\r\n            await agent.activities.create(activity);\r\n\r\n            const newActivity = new Activity(activity);\r\n\r\n            newActivity.hostUsername = user!.username;\r\n\r\n            newActivity.attendees = [attendee];\r\n\r\n            this.setActivity(newActivity);\r\n\r\n            runInAction(() => {\r\n\r\n                this.chosenActivity = newActivity;\r\n\r\n            });\r\n\r\n        } catch (error) {\r\n\r\n            console.log(error);\r\n\r\n        }\r\n    };\r\n\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n\r\n        try {\r\n\r\n            await agent.activities.update(activity);\r\n\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n\r\n                    let updatedActivity = {...this.getActivity(activity.id),...activity};\r\n\r\n                    this.activityRegister.set(activity.id, updatedActivity as Activity);\r\n\r\n                    this.chosenActivity = updatedActivity as Activity;\r\n                }\r\n            });\r\n \r\n        } catch (error) {\r\n\r\n            console.log(error);\r\n            \r\n        }\r\n    };\r\n\r\n\r\n    deleteActivity = async(id: string) => {\r\n\r\n        \r\n        this.loading = true;\r\n\r\n        try {\r\n\r\n            await agent.activities.delete(id);\r\n\r\n            runInAction(() => {\r\n\r\n                this.activityRegister.delete(id);\r\n\r\n                this.loading = false;\r\n            });\r\n            \r\n        } catch (error) {\r\n\r\n            console.log(error);\r\n            \r\n            runInAction(() => {\r\n                \r\n                this.loading = false;\r\n            });\r\n        }\r\n\r\n\r\n    };\r\n\r\n\r\n    updateAttendance = async() => {\r\n\r\n        const user = store.userStore.user;\r\n\r\n        this.loading = true;\r\n\r\n        try {\r\n\r\n            await agent.activities.attend(this.chosenActivity?.id!)\r\n\r\n            runInAction(() => {\r\n                \r\n                if (this.chosenActivity?.isGoing) {\r\n\r\n                    this.chosenActivity.attendees = \r\n                        this.chosenActivity.attendees?.filter(\r\n                            a => a.username !== user?.username\r\n                        );\r\n                    \r\n                    this.chosenActivity.isGoing = false;\r\n\r\n                } else {\r\n\r\n                    const attendee = new Profile(user!);\r\n\r\n                    this.chosenActivity?.attendees?.push(attendee);\r\n\r\n                    this.chosenActivity!.isGoing = true;\r\n                }\r\n\r\n                this.activityRegister.set(this.chosenActivity!.id, this.chosenActivity!);\r\n            });\r\n            \r\n        } catch (error) {\r\n\r\n            console.log(error);\r\n            \r\n        } finally {\r\n\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    };\r\n\r\n\r\n    cancelActivityToggle = async () => {\r\n\r\n        this.loading = true;\r\n\r\n        try {\r\n\r\n            await agent.activities.attend(this.chosenActivity!.id);\r\n\r\n            runInAction(() => {\r\n\r\n                this.chosenActivity!.isCancelled = !this.chosenActivity!.isCancelled;\r\n\r\n                this.activityRegister.set(this.chosenActivity!.id, this.chosenActivity!);\r\n            });\r\n            \r\n        } catch (error) {\r\n\r\n            console.log(error);\r\n        \r\n        } finally {\r\n\r\n            runInAction(() => this.loading = false);\r\n        }\r\n\r\n    };\r\n\r\n\r\n    clearChosenActivity = () => {\r\n        \r\n        this.chosenActivity = undefined;\r\n    };\r\n\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n\r\n        this.activityRegister.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if (attendee.username === username){\r\n\r\n                    attendee.following ? \r\n                    attendee.followersCount-- :\r\n                    attendee.followersCount++;\r\n\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        });\r\n    };\r\n};","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n\r\n    constructor() {\r\n\r\n        makeAutoObservable(this);\r\n\r\n        reaction(() =>  \r\n            this.activeTab, \r\n            activeTab => {\r\n\r\n                if (activeTab === 3 || activeTab === 4) {\r\n\r\n                    const predicate = activeTab === 3 ?\r\n                                      'followers' :\r\n                                      'following';\r\n                    \r\n                    this.loadFollowings(predicate);\r\n\r\n                } else {\r\n                    this.followings = [];\r\n\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    \r\n    setActiveTab = (activeTab: any) => {\r\n\r\n        this.activeTab = activeTab;\r\n    };\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.profiles.uploadPhoto(file);\r\n            \r\n            const photo = response.data;\r\n            \r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            })\r\n        } catch (error) {   \r\n\r\n            console.log(error);\r\n            \r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n\r\n        this.loading = true;\r\n\r\n        try {\r\n\r\n            await agent.profiles.updateFollowing(username);\r\n\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n\r\n            runInAction(() => {\r\n\r\n                if (this.profile && \r\n                    this.profile.username !== store.userStore.user?.username && \r\n                    this.profile.username === username\r\n                    ) {\r\n                    \r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    \r\n                    this.profile.following = !this.profile.following;\r\n                    \r\n                }\r\n\r\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\r\n                    \r\n                    following ? \r\n                    this.profile.followingCount++ : \r\n                    this.profile.followingCount--;\r\n                }\r\n\r\n                this.followings.forEach(profile =>{\r\n\r\n                    if (profile.username === username){\r\n\r\n                        profile.following ? \r\n                        profile.followersCount-- :\r\n                        profile.followersCount++;\r\n\r\n                        profile.following = !profile.following;\r\n                    }\r\n                });\r\n\r\n                this.loading = false;\r\n            });\r\n            \r\n        } catch (error) {\r\n\r\n            runInAction(() => this.loading = false);\r\n\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n\r\n    loadFollowings = async (predicate : string) => {\r\n\r\n        this.loadingFollowings = true;\r\n\r\n        try {\r\n\r\n            const followings =\r\n                  await agent.profiles.listFollowings(this.profile!.username, predicate);\r\n\r\n            runInAction(() => {\r\n\r\n                this.followings = followings;\r\n\r\n                this.loadingFollowings = false\r\n            });\r\n            \r\n        } catch (error) {\r\n            \r\n            console.log(error);\r\n\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n\r\n\r\n    };\r\n}","import { makeAutoObservable, runInAction } from 'mobx';\r\nimport agent from '../api/agent';\r\nimport { User, UserFormValues } from '../models/user';\r\nimport { store } from './store';\r\nimport { history } from '../..';\r\n\r\n\r\nexport default class UserStore {\r\n\r\n    user: User | null = null;\r\n\r\n    constructor() {\r\n\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    \r\n    get isLoggedIn() {\r\n\r\n        return !!this.user;\r\n    }\r\n\r\n\r\n    login = async(creds: UserFormValues) => {\r\n\r\n        try {\r\n\r\n            const user = await agent.account.login(creds);\r\n\r\n            store.commonStore.setToken(user.token);\r\n\r\n            runInAction(() => this.user = user);\r\n\r\n            history.push('/activities');\r\n\r\n            store.modalStore.closeModal();\r\n\r\n        } catch(error) {\r\n\r\n            throw error;\r\n            \r\n        }\r\n    }\r\n\r\n\r\n    logout = () => {\r\n\r\n        store.commonStore.setToken(null);\r\n\r\n        window.localStorage.removeItem('jwt');\r\n\r\n        this.user = null;\r\n\r\n        history.push('/');\r\n    }\r\n\r\n\r\n    getUser = async () => {\r\n\r\n        try {\r\n\r\n            const user = await agent.account.current();\r\n\r\n            runInAction(() => {\r\n\r\n                this.user = user;\r\n            });\r\n            \r\n        } catch (error) {\r\n\r\n            console.log(error);\r\n            \r\n        }\r\n    }\r\n\r\n\r\n    register = async (creds: UserFormValues) => {\r\n\r\n        try {\r\n\r\n            const user = await agent.account.register(creds);\r\n\r\n            store.commonStore.setToken(user.token);\r\n\r\n            runInAction(() => this.user = user);\r\n\r\n            history.push('/activities');\r\n\r\n            store.modalStore.closeModal();\r\n\r\n        } catch(error) {\r\n\r\n            throw error;\r\n            \r\n        }\r\n    }\r\n    \r\n\r\n    setImage = (image: string) => {\r\n        if (this.user) this.user.image = image;\r\n    } \r\n}; ","import { createContext, useContext } from 'react';\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from './commentStore';\r\nimport CommonStore from './commonStore';\r\nimport ModalStore from './modalStore';\r\nimport ProfileStore from './profileStore';\r\nimport UserStore from './userStore';\r\n\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n};\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n};\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\n\r\nexport function useStore() {\r\n\r\n    return useContext(StoreContext);\r\n};","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\n\r\nexport default class CommonStore {\r\n\r\n    error: ServerError | null = null;\r\n\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n\r\n    appLoaded: boolean = false;\r\n\r\n\r\n    constructor() {\r\n        \r\n        makeAutoObservable(this);\r\n     \r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n\r\n                if (token) {\r\n\r\n                    window.localStorage.setItem('jwt',token);\r\n\r\n                } else {\r\n\r\n                    window.localStorage.removeItem('jwt'); \r\n\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        \r\n        this.error = error;\r\n    }\r\n\r\n\r\n    setToken = (token :string | null) => {\r\n\r\n        this.token = token;\r\n\r\n    }\r\n\r\n\r\n    setAppLoaded = () => {\r\n\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from 'mobx';\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\n\r\n\r\nexport default class CommentStore {\r\n\r\n    comments: ChatComment[] = [];\r\n\r\n    hubConnection: HubConnection | null = null;\r\n    \r\n    constructor() {\r\n        \r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => \r\n    {\r\n        if (store.activityStore.chosenActivity) {\r\n            \r\n            this.hubConnection = new HubConnectionBuilder()\r\n                    .withUrl(process.env.REACT_APP_CHAT_URL + \"?activityId=\"+activityId,{\r\n                        accessTokenFactory: () => store.userStore.user?.token!\r\n                    })\r\n                    .withAutomaticReconnect()\r\n                    .configureLogging(LogLevel.Information)\r\n                    .build();\r\n\r\n            this.hubConnection.start()\r\n                    .catch(error => console.log(\"Error establishing signalr connection: \", error));\r\n        \r\n            this.hubConnection.on(\"LoadComments\", (comments: ChatComment[]) => {\r\n                    \r\n                runInAction(() => {\r\n\r\n                    comments.forEach(comment => {\r\n\r\n                        comment.createdAt = new Date(comment.createdAt+'Z');\r\n                    });\r\n\r\n                    this.comments = comments;\r\n                });\r\n            });\r\n\r\n\r\n            this.hubConnection.on(\"ReceiveComment\", (comment: ChatComment) => {\r\n                    \r\n                runInAction(() => {\r\n\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n\r\n                    this.comments.unshift(comment);\r\n                });\r\n            });\r\n        }\r\n    };\r\n\r\n  \r\n    stopHubConnection = () => {\r\n\r\n        this.hubConnection?.stop()\r\n                .catch(error => console.log(\"Error stopping signalr connection: \", error));;\r\n    };\r\n\r\n\r\n    clearComments = () => {\r\n\r\n        this.comments = [];\r\n\r\n        this.stopHubConnection();\r\n    };\r\n\r\n\r\n    addComment = async (values: any) => {\r\n\r\n        values.activityId = store.activityStore.chosenActivity?.id;\r\n\r\n        try {\r\n\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n            \r\n        } catch (error) {\r\n\r\n            console.log(error);\r\n        }\r\n    };\r\n};","import { observer } from 'mobx-react-lite';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Container, Menu, Button, Image, Dropdown } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\n\r\nfunction NavBar() {\r\n\r\n    const { userStore: {user, logout} } = useStore();\r\n\r\n\r\n    return (\r\n        \r\n     <Menu inverted fixed='top'>\r\n         <Container>\r\n             <Menu.Item  as={ NavLink } to='/' exact header>\r\n                 <img src=\"/assets/logo.png\" alt=\"logo\" style={{marginRight:'10px'}} />\r\n                 Eventum\r\n             </Menu.Item>\r\n             <Menu.Item as={ NavLink } to='/activities' name='Activities' />\r\n             <Menu.Item>\r\n                 <Button\r\n                  positive\r\n                  content='Create activity'\r\n                  as={ NavLink } to='/new'\r\n                 />\r\n              </Menu.Item>\r\n              <Menu.Item\r\n               position='right'\r\n              >\r\n                  <Image\r\n                   src={ user?.image || '/assets/user.png' } \r\n                   avatar\r\n                   spaced='right'\r\n                  />\r\n                  <Dropdown\r\n                   pointing='top left' \r\n                   text={ user?.displayName }\r\n                  >\r\n                    <Dropdown.Menu>\r\n                      <Dropdown.Item \r\n                       as={ Link }\r\n                       to={`/profiles/${user?.username}`}\r\n                       text='My Profile'\r\n                       icon='user'\r\n                      />\r\n                      <Dropdown.Item \r\n                       onClick={ logout }\r\n                       text='Logout'\r\n                       icon='power'\r\n                      />\r\n                    </Dropdown.Menu>  \r\n                  </Dropdown>\r\n              </Menu.Item>\r\n         </Container>\r\n     </Menu>   \r\n    )\r\n};\r\n\r\n\r\nexport default observer(NavBar);","import { observer } from \"mobx-react-lite\";\r\nimport Calendar from \"react-calendar\";\r\nimport { Header, Menu } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\n\r\nfunction ActivityFilters() {\r\n\r\n    const { activityStore: {predicate, setPredicate} } = useStore();\r\n\r\n    return (\r\n        <>\r\n        <Menu\r\n         vertical\r\n         size='large'\r\n         style={{width: '100%', marginTop: 26}}\r\n        >\r\n            <Header \r\n             icon='filter'\r\n             attached\r\n             color='teal'\r\n             content='Filters'\r\n            >\r\n            </Header>\r\n            <Menu.Item\r\n             content='All activities' \r\n             active={predicate.has('all')}\r\n             onClick={() => setPredicate('all', 'true')}\r\n            />\r\n            <Menu.Item\r\n             content=\"I'm going\"\r\n             active={predicate.has('isGoing')}\r\n             onClick={() => setPredicate('isGoing', 'true')} \r\n            />\r\n            <Menu.Item\r\n             content=\"I'm hosting\"\r\n             active={predicate.has('isHost')}\r\n             onClick={() => setPredicate('isHost', 'true')} \r\n            />\r\n        </Menu>\r\n        <Header />\r\n        <Calendar\r\n         onChange={(date) => setPredicate('startDate', date as Date)}\r\n         value={predicate.get('startDate') || new Date()}\r\n        />\r\n        </>\r\n    )\r\n};\r\n\r\n\r\nexport default observer(ActivityFilters);","import { observer } from \"mobx-react-lite\";\r\nimport { SyntheticEvent } from \"react\";\r\nimport { Button, Reveal } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n};\r\n\r\n\r\nfunction FollowButton({profile}: Props) {\r\n\r\n    const { profileStore, userStore } = useStore();\r\n\r\n    const { loading, updateFollowing} = profileStore;\r\n\r\n    if (userStore.user?.username===profile.username) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string) {\r\n\r\n        e.preventDefault();\r\n\r\n        profile.following ? updateFollowing(username, false)\r\n                          : updateFollowing(username, true);\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n\r\n        <Reveal animated='move'>\r\n        <Reveal.Content visible style={{width: '100%'}}>\r\n            <Button \r\n             fluid \r\n             color='teal' \r\n             content={profile.following ? 'Following' : 'Not following'}\r\n            />\r\n        </Reveal.Content>\r\n        <Reveal.Content hidden style={{width: '100%'}}>\r\n            <Button \r\n                fluid \r\n                basic\r\n                color={profile.following ? 'red' : 'green'} \r\n                content={profile.following ? 'Unfollow' : 'Follow'}\r\n                loading={loading}\r\n                onClick={(e) => handleFollow(e, profile.username)}\r\n            />\r\n        </Reveal.Content>\r\n    </Reveal>\r\n    )\r\n};\r\n\r\n\r\nexport default observer(FollowButton);","import { observer } from \"mobx-react-lite\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Icon, Image } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n};\r\n\r\n\r\nfunction ProfileCard({profile}: Props) {\r\n\r\n    return (\r\n\r\n        <Card \r\n         as={Link}\r\n         to={`/profiles/${profile.username}`}\r\n        >\r\n          <Image \r\n           src={profile.image || '/assets/user.png'}\r\n          />\r\n          <Card.Content >\r\n              <Card.Header>\r\n                  { profile.displayName }\r\n              </Card.Header>\r\n              <Card.Description>\r\n                  Bio goes here\r\n              </Card.Description>\r\n          </Card.Content>\r\n          <Card.Content extra>\r\n            <Icon name='user' />\r\n             {profile.followersCount} followers\r\n          </Card.Content>\r\n          <FollowButton profile={profile}/>\r\n        </Card>\r\n\r\n    )\r\n};\r\n\r\n\r\nexport default observer(ProfileCard);","import { observer } from \"mobx-react-lite\"\r\nimport { Link } from \"react-router-dom\";\r\nimport { List, Image, Popup } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../../app/models/profile\";\r\nimport ProfileCard from \"../../profiles/ProfileCard\";\r\n\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\n\r\nfunction ActivityListItemAttendee({attendees} : Props) {\r\n\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 4\r\n    };\r\n\r\n    return (\r\n        <List\r\n         horizontal\r\n        > \r\n        { attendees.map(attendee => (\r\n                <Popup \r\n                 hoverable\r\n                 key={attendee.username}\r\n                 trigger={\r\n                    <List.Item key={ attendee.username }\r\n                    as={Link}\r\n                    to={`profiles/${attendee.username}`}\r\n                   >\r\n                       <Image \r\n                       size='mini'\r\n                       circular\r\n                       src={ attendee.image || '/assets/user.png'}\r\n                       bordered\r\n                       style={ attendee.following ?  styles : null }\r\n                       />\r\n                   </List.Item>\r\n                 }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee}/>\r\n                    </Popup.Content>\r\n                </Popup>\r\n            ))\r\n        }\r\n        </List>\r\n    )\r\n};\r\n\r\nexport default observer(ActivityListItemAttendee);","import format from \"date-fns/format\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Icon, Item, Label, Segment } from \"semantic-ui-react\";\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport ActivityListItemAttendee from \"./ActivityListItemAttendee\";\r\n\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\n\r\nexport default function ActivityListItem({ activity } : Props) {\r\n\r\n  \r\n    return (\r\n        \r\n        <Segment.Group>\r\n            <Segment>\r\n                {\r\n                    activity.isCancelled && \r\n                    <Label \r\n                     attached='top'\r\n                     color='red'\r\n                     content='Cancelled'\r\n                     style={{textAlign: 'center'}}\r\n                    />\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image\r\n                         style={{marginBottom: 3}}\r\n                         size='tiny' \r\n                         circular\r\n                         src={ activity.host?.image || '/assets/user.png'}\r\n                        />\r\n                        <Item.Content>\r\n                            <Item.Header \r\n                             as={ Link }\r\n                             to={`/activities/${activity.id}`}\r\n                            >\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>\r\n                                Hosted by {activity.host?.displayName}\r\n                            </Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                <Label basic color='green'>\r\n                                        You are going to this event\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock'/> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon name='marker'/> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{ activity.description }</span>\r\n                <Button \r\n                 as={ Link }\r\n                 to={`/activities/${activity.id}`}\r\n                 color='teal'\r\n                 floated='right'\r\n                 content='View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n};","import { observer } from 'mobx-react-lite';\r\nimport { Fragment } from 'react';\r\nimport { Header } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\n\r\nfunction ActivityList() {\r\n\r\n    const { activityStore } = useStore();\r\n\r\n    const { groupedActivities } = activityStore;\r\n\r\n    return (\r\n        <>\r\n            {groupedActivities.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color='teal'>\r\n                        {group}\r\n                    </Header>\r\n                    {activities.map(activity => (\r\n                        <ActivityListItem key={activity.id} activity={activity} />\r\n                    ))}\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n\r\n    )\r\n \r\n};\r\n\r\n\r\nexport default observer(ActivityList);","import { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import { observer } from 'mobx-react-lite';\r\nimport { useEffect, useState } from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityFilters from './ActivityFilters';\r\nimport ActivityList from './ActivityList';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\n\r\n\r\nfunction ActivityDashboard() {\r\n\r\n    const { activityStore } = useStore();\r\n    const { loadActivities, activityRegister, setPagingParams, pagination } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        \r\n        setLoadingNext(true);\r\n\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1))\r\n        \r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        if (activityRegister.size <= 1) loadActivities();\r\n\r\n    }, [activityRegister.size, loadActivities])\r\n \r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                        <InfiniteScroll\r\n                            pageStart={0}\r\n                            loadMore={handleGetNext}\r\n                            hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                            initialLoad={false}\r\n                        >\r\n                            <ActivityList />\r\n                        </InfiniteScroll>\r\n                    )}\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n\r\n};\r\n\r\n\r\nexport default observer(ActivityDashboard);","import { useField } from 'formik';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    label?: string;\r\n    type?: string;\r\n}\r\n\r\n\r\nexport default function ReuseTextInput(props : Props) {\r\n\r\n    const [field, meta] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{ props.label }</label>\r\n            <input {...field} {...props} />\r\n            {\r\n                meta.touched && !!meta.error ? \r\n                (\r\n                    <Label basic color='red'>\r\n                        { meta.error }\r\n                    </Label>\r\n                ) : \r\n                null\r\n            }\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button, Header, Label } from \"semantic-ui-react\";\r\nimport ReuseTextInput from \"../../app/common/form/ReuseTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\n\r\nfunction LoginForm() {\r\n\r\n    const {userStore} = useStore();\r\n\r\n    return (\r\n        <Formik\r\n         initialValues={{email: '', password: '', error: null\r\n         }}\r\n         onSubmit={\r\n          (values, {setErrors}) => userStore.login(values).catch(error =>\r\n            setErrors({error: 'Invalid credentials'})\r\n            )\r\n         }\r\n        >\r\n            {({handleSubmit, isSubmitting, errors}) => (\r\n                <Form \r\n                 className='ui form' \r\n                 onSubmit={handleSubmit}\r\n                 autoComplete='off'\r\n                >\r\n                    <Header \r\n                     as='h2' \r\n                     content='login to the activities' \r\n                     color='teal' \r\n                     textAlign='center'\r\n                    />\r\n                    <ReuseTextInput name='email' placeholder='email' />\r\n                    <ReuseTextInput name='password' placeholder='password' type='password' />\r\n                    <ErrorMessage \r\n                     name='error'\r\n                     render = {\r\n                        () => <Label style={{marginBottom: 10}} basic color='red' content={errors.error}/>\r\n                    }\r\n                    />\r\n                    <Button \r\n                     positive \r\n                     fluid \r\n                     content='Login' \r\n                     type='submit'\r\n                     loading={isSubmitting} \r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n};\r\n\r\n\r\nexport default observer(LoginForm);","import { Message } from \"semantic-ui-react\";\r\n\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\n\r\nexport default function ValidationErrors({errors}: Props) {\r\n\r\n    return (\r\n        <Message error>\r\n            { \r\n                errors && (\r\n                    <Message.List>\r\n                      {                                               \r\n                        errors.map((err: any, i:any) => (\r\n                            <Message.Item key={i}>\r\n                                {err}\r\n                            </Message.Item>\r\n                        ))\r\n                      }\r\n                    </Message.List>\r\n                )\r\n            }\r\n        </Message>\r\n    )\r\n};","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button, Header } from \"semantic-ui-react\";\r\nimport ReuseTextInput from \"../../app/common/form/ReuseTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from \"../errors/ValidationErrors\";\r\n\r\n\r\nfunction RegisterForm() {\r\n\r\n    const {userStore} = useStore();\r\n\r\n    return (\r\n        <Formik\r\n         initialValues={{\r\n                displayName: '', \r\n                username: '',\r\n                email: '', \r\n                password: '', \r\n                error: null\r\n         }}\r\n         validationSchema={Yup.object({\r\n            displayName: Yup.string().required(),\r\n            username: Yup.string().required(),\r\n            email: Yup.string().required().email(),\r\n            password: Yup.string().required(),\r\n         })}\r\n         onSubmit={\r\n          (values, {setErrors}) => userStore.register(values).catch(error =>\r\n            setErrors({error})\r\n            )\r\n         }\r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form \r\n                 className='ui form error' \r\n                 onSubmit={handleSubmit}\r\n                 autoComplete='off'\r\n                >\r\n                    <Header \r\n                     as='h2' \r\n                     content='Sign Up to activities' \r\n                     color='teal' \r\n                     textAlign='center'\r\n                    />\r\n                    <ReuseTextInput name='displayName' placeholder='Display name' />\r\n                    <ReuseTextInput name='username' placeholder='User Name' />\r\n                    <ReuseTextInput name='email' placeholder='Email' />\r\n                    <ReuseTextInput name='password' placeholder='password' type='password' />\r\n                    <ErrorMessage \r\n                     name='error'\r\n                     render = {\r\n                        () => <ValidationErrors errors={errors.error}/>\r\n                    }\r\n                    />\r\n                    <Button \r\n                     positive \r\n                     fluid \r\n                     content='Register' \r\n                     type='submit'\r\n                     loading={isSubmitting} \r\n                     disabled={ !dirty || !isValid || isSubmitting }\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n};\r\n\r\n\r\nexport default observer(RegisterForm);","import { observer } from 'mobx-react-lite';\r\nimport { Link } from 'react-router-dom';\r\nimport { Container, Header, Segment, Image, Button } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\n\r\nfunction HomePage() {\r\n\r\n    const { userStore, modalStore } = useStore();\r\n\r\n\r\n    return (\r\n        <Segment vertical textAlign='center' className='masterhead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' style={{marginBottom: 12}}>\r\n\r\n                    </Image>\r\n                </Header>\r\n                {userStore.isLoggedIn ? \r\n                    (\r\n                        <>\r\n                         <Header as='h2' inverted content='Welcome to the Eventag!' />\r\n                         <Button as={ Link } to='/activities' inverted size='huge'>\r\n                            Go to activities\r\n                         </Button>\r\n                        </>\r\n                        \r\n                    ) : (\r\n                        <>\r\n                        <Button \r\n                         onClick={() => modalStore.openModal(<LoginForm />)}\r\n                         inverted \r\n                         size='huge'\r\n                        >\r\n                            Login\r\n                        </Button>\r\n                        <Button \r\n                         onClick={() => modalStore.openModal(<RegisterForm />)}\r\n                         inverted \r\n                         size='huge'\r\n                        >\r\n                            Register\r\n                        </Button>\r\n                        </>\r\n                    )\r\n                }\r\n            </Container>\r\n        </Segment>\r\n    )\r\n};\r\n\r\n\r\nexport default observer(HomePage);","import { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\n\r\nexport default function LoadingComponent({\r\n    inverted = true, \r\n    content = 'Loading...'\r\n    }: Props) {\r\n\r\n    return(\r\n\r\n        <Dimmer active={true} inverted={ inverted }>\r\n            <Loader content={ content } />\r\n        </Dimmer>\r\n    )\r\n};\r\n","import { useField } from 'formik';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\n\r\nexport default function ReuseTextArea(props : Props) {\r\n\r\n    const [field, meta] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{ props.label }</label>\r\n            <textarea {...field} {...props} />\r\n            {\r\n                meta.touched && !!meta.error ? \r\n                (\r\n                    <Label basic color='red'>\r\n                        { meta.error }\r\n                    </Label>\r\n                ) : \r\n                null\r\n            }\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    {text: 'Drinks', value: 'drinks'},\r\n    {text: 'Culture', value: 'culture'},\r\n    {text: 'Film', value: 'film'},\r\n    {text: 'Food', value: 'food'},\r\n    {text: 'Music', value: 'music'},\r\n    {text: 'Travel', value: 'travel'}\r\n\r\n];","import { useField } from 'formik';\r\nimport { Form, Label, Select } from 'semantic-ui-react';\r\n\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\n\r\nexport default function ReuseSelectInput(props : Props) {\r\n\r\n    const [field, meta, helpers] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{ props.label }</label>\r\n            <Select \r\n             clearable\r\n             options={ props.options }\r\n             value={ field.value || null }\r\n             onChange={ (event, data) => helpers.setValue(data.value) }\r\n             onBlur={ () => helpers.setTouched(true) }\r\n             placeholder={ props.placeholder }\r\n            />\r\n            {\r\n                meta.touched && !!meta.error ? \r\n                (\r\n                    <Label basic color='red'>\r\n                        { meta.error }\r\n                    </Label>\r\n                ) : \r\n                null\r\n            }\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from 'formik';\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport DatePicker, { ReactDatePickerProps } from 'react-datepicker';\r\n\r\n\r\nexport default function ReuseDateInput(props : Partial<ReactDatePickerProps>) {\r\n\r\n    const [field, meta, helpers] = useField(props.name!);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker\r\n             {...field}\r\n             {...props}\r\n             selected={ (field.value && new Date(field.value)) || null}\r\n             onChange={ value => helpers.setValue(value) }\r\n            />\r\n            {\r\n                meta.touched && !!meta.error ? \r\n                (\r\n                    <Label basic color='red'>\r\n                        { meta.error }\r\n                    </Label>\r\n                ) : \r\n                null\r\n            }\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport { useEffect } from 'react';\r\nimport {  useState } from 'react';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport ReuseTextInput from '../../../app/common/form/ReuseTextInput';\r\nimport ReuseTextArea from '../../../app/common/form/ReuseTextArea';\r\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\r\nimport ReuseSelectInput from '../../../app/common/form/ReuseSelectInput';\r\nimport ReuseDateInput from '../../../app/common/form/ReuseDateInput';\r\nimport { ActivityFormValues } from '../../../app/models/activity';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\n\r\nfunction ActivityForm() {\r\n\r\n    const { activityStore } = useStore();\r\n\r\n    const history = useHistory();\r\n\r\n    const { createActivity, \r\n        updateActivity, \r\n        loadActivity,\r\n        loadingInitial\r\n      } = activityStore;\r\n\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('Activity title is mandatory'),\r\n        description: Yup.string().required('Activity description is mandatory'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        city: Yup.string().required(),\r\n        venue: Yup.string().required()\r\n    })\r\n\r\n\r\n    const [activity, setActivity] = \r\n            useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if (id) {\r\n\r\n            loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)));\r\n        }\r\n\r\n    }, [id, loadActivity]);\r\n\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`))\r\n        } else {\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\r\n        }\r\n    }\r\n\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading activity...' />;\r\n\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity details' sub color='teal' />\r\n            <Formik\r\n             validationSchema={validationSchema} \r\n             enableReinitialize \r\n             initialValues={activity} \r\n             onSubmit={values => handleFormSubmit(values)}>\r\n                {\r\n                    ({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n\r\n                        <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                            <ReuseTextInput\r\n                             name='title'\r\n                             placeholder='Title' \r\n                            />\r\n                            <ReuseTextArea rows={4}\r\n                                placeholder='Description'\r\n                                name='description'\r\n                            />\r\n                            <ReuseSelectInput options={categoryOptions}\r\n                                placeholder='Category'\r\n                                name='category'\r\n                            />\r\n                            <ReuseDateInput\r\n                                placeholderText='Date'\r\n                                name='date'\r\n                                showTimeSelect\r\n                                timeCaption='time'\r\n                                dateFormat='MMMM d, yyyy h:mm a'\r\n                            />\r\n                            <Header content='Location details' sub color='teal' />\r\n                            <ReuseTextInput\r\n                                placeholder='City'\r\n                                name='city'\r\n                            />\r\n                            <ReuseTextInput\r\n                                placeholder='Venue'\r\n                                name='venue'\r\n                            />\r\n                            <Button\r\n                                floated='right'\r\n                                positive\r\n                                type='submit'\r\n                                content='Sumbit'\r\n                                loading={isSubmitting}\r\n                            />\r\n                            <Button\r\n                                disabled={isSubmitting || !isValid || !dirty }\r\n                                floated='right'\r\n                                type='button'\r\n                                content='Cancel'\r\n                                as={Link} to='/activities'\r\n                            />\r\n                        </Form>\r\n                    )\r\n                }\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n};\r\n\r\n\r\nexport default observer(ActivityForm);","import { Formik, Form, Field, FieldProps } from 'formik';\r\nimport { observer } from 'mobx-react-lite'\r\nimport { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport {Segment, Header, Comment, Loader} from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns';\r\n\r\n\r\ninterface Props {\r\n    activityId: string;\r\n\r\n};\r\n\r\nfunction ActivityDetailedChat({activityId}: Props) {\r\n    \r\n    const { commentStore } = useStore();\r\n\r\n    useEffect(()=> {\r\n\r\n        if (activityId) {\r\n\r\n            commentStore.createHubConnection(activityId)\r\n        }\r\n\r\n        return () => {\r\n\r\n            commentStore.clearComments();\r\n        }\r\n\r\n    },[commentStore, activityId]);\r\n\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n             <Formik\r\n                        onSubmit={(values, {resetForm}) => \r\n                            commentStore.addComment(values)\r\n                                .then(() => resetForm())\r\n                        }\r\n                        initialValues={{body:''}}\r\n                        validationSchema = {\r\n                            Yup.object({ body: Yup.string().required() })\r\n                        }\r\n                    >\r\n                        {({isSubmitting, isValid, handleSubmit}) => (\r\n                            <Form className='ui form' >\r\n                                <Field \r\n                                 name='body'\r\n                                >\r\n                                  {(props: FieldProps) => (\r\n                                      <div \r\n                                       style={{\r\n                                           position: 'relative',\r\n                                       }}\r\n                                      >\r\n                                          <Loader active={isSubmitting} />\r\n                                          <textarea \r\n                                           placeholder='Enter your comment \r\n                                            (ENTER to submit, SHIFT+Enter for new line)'\r\n                                           rows={2}\r\n                                           {...props.field}\r\n                                           onKeyPress={ e => {\r\n                                               if (e.key==='Enter' && e.shiftKey) {\r\n                                                   return;\r\n                                               }\r\n                                               if (e.key==='Enter' && !e.shiftKey) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit();\r\n                                               }\r\n                                           }}\r\n                                          />\r\n                                      </div>\r\n                                  )}  \r\n                                </Field>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n                <Comment.Group>\r\n                    {   commentStore.comments.map(comment => (\r\n                               <Comment key={comment.id}>\r\n                               <Comment.Avatar src={comment.image || '/assets/user.png'}/>\r\n                               <Comment.Content>\r\n                                   <Comment.Author\r\n                                    as={Link}\r\n                                    to={`/profiles/${comment.username}`}\r\n                                   >\r\n                                       {comment.displayName}\r\n                                   </Comment.Author>\r\n                                   <Comment.Metadata>\r\n                                       <div>{formatDistanceToNow(comment.createdAt) } ago</div>\r\n                                   </Comment.Metadata>\r\n                                   <Comment.Text style={{whitespce: 'pre-wrap'}}>{ comment.body }!</Comment.Text>\r\n                               </Comment.Content>\r\n                           </Comment>\r\n                        ))\r\n                    }\r\n                    </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n};\r\n\r\n\r\n\r\nexport default observer(ActivityDetailedChat);","import format from 'date-fns/format';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\n\r\nfunction ActivityDetailedHeader({activity}: Props) {\r\n    \r\n    const {activityStore: {updateAttendance, loading, cancelActivityToggle}} = useStore();\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                { activity.isCancelled && \r\n                    <Label \r\n                     style={{\r\n                                position: 'absolute', \r\n                                zIndex: 100, \r\n                                left: -14,\r\n                                top: 20\r\n                            }}\r\n                     ribbon\r\n                     color='red'\r\n                     content='Cancelled'\r\n                    />\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{format(activity.date!,'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong>\r\n                                        <Link to={`/profiles/${activity.host?.username}`}>\r\n                                        { activity.host?.displayName }\r\n                                        </Link>\r\n                                    </strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                { activity.isHost ? (\r\n                  <>\r\n                   <Button \r\n                    color={activity.isCancelled ? 'green' : 'red'}\r\n                    floated='left'\r\n                    basic\r\n                    content={activity.isCancelled ? 'Re-activate this event' : 'Cancel this event'}\r\n                    onClick={cancelActivityToggle}\r\n                    loading={loading}\r\n                   />\r\n                   <Button \r\n                    as={Link} \r\n                    to={`/manage/${activity.id}`} \r\n                    color='orange' \r\n                    floated='right'\r\n                    disabled={activity.isCancelled}\r\n                   >\r\n                     Manage Event\r\n                   </Button>\r\n                  </>\r\n                 ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={updateAttendance}>\r\n                        Cancel attendance\r\n                    </Button>\r\n                 ) : (\r\n                    <Button disabled={activity.isCancelled}  loading={loading} onClick={updateAttendance} color='teal'>\r\n                        Join Activity\r\n                    </Button>\r\n                 )\r\n                }\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n};\r\n\r\n\r\nexport default observer(ActivityDetailedHeader);\r\n","import format from 'date-fns/format';\r\nimport { observer } from 'mobx-react-lite';\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nfunction ActivityDetailedInfo({activity}: Props) {\r\n    \r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format(activity.date!,'dd MMM yyyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n};\r\n\r\nexport default observer(ActivityDetailedInfo);","import { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\n\r\n\r\nfunction ActivityDetailedSidebar ({activity: {attendees, host}} : Props) {\r\n    \r\n    if (!attendees) return null;\r\n\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length ===1 ? 'person' : 'people'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {\r\n                    attendees.map(attendee => (\r\n\r\n                    <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                        {attendee.username === host?.username && \r\n                        <Label\r\n                            style={{ position: 'absolute' }}\r\n                            color='orange'\r\n                            ribbon='right'\r\n                        >\r\n                            Host\r\n                        </Label>\r\n                        }\r\n                        <Image size='tiny' src={attendee.image ||'/assets/user.png'} />\r\n                        <Item.Content verticalAlign='middle'>\r\n                            <Item.Header as='h3'>\r\n                                <Link to={`/profiles/${attendee.username}`}>\r\n                                 { attendee.displayName }\r\n                                </Link>\r\n                            </Item.Header>\r\n                            {attendee.following && \r\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                            }\r\n                        </Item.Content>\r\n                    </Item>\r\n                        ))\r\n                    }\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n};\r\n\r\n\r\nexport default observer(ActivityDetailedSidebar);","import { observer } from 'mobx-react-lite';\r\nimport { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\r\n\r\n\r\nfunction ActivityDetails() {\r\n\r\n    const { activityStore } = useStore();\r\n\r\n    const { chosenActivity: activity, \r\n        loadActivity, loadingInitial, clearChosenActivity } = activityStore;\r\n\r\n    const { id } = useParams<{id: string}>();\r\n\r\n\r\n    useEffect(() =>{\r\n\r\n        if (id) {\r\n\r\n            loadActivity(id);\r\n        }\r\n\r\n        return () => clearChosenActivity();\r\n\r\n    }, [id, loadActivity, clearChosenActivity]);\r\n\r\n\r\n    if (loadingInitial || !activity) return <LoadingComponent />;\r\n\r\n\r\n    return (\r\n      \r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity} />\r\n                <ActivityDetailedInfo activity={activity} />\r\n                <ActivityDetailedChat activityId={activity.id}/>\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSidebar activity={activity} />\r\n            </Grid.Column>\r\n        </Grid> \r\n    )\r\n};\r\n\r\n\r\nexport default observer(ActivityDetails);","import { Link } from \"react-router-dom\";\r\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\r\n\r\n\r\nexport default function NotFound() {\r\n\r\n    return (\r\n        <Segment>\r\n            <Header icon>\r\n                <Icon name='search'></Icon>\r\n                Oops! We've looked everywhere and could not find it!\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to the activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n};","import { observer } from \"mobx-react-lite\";\r\nimport { Container, Header, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\n\r\nfunction ServerError() {\r\n\r\n    const { commonStore } = useStore();\r\n\r\n    return (\r\n\r\n         <Container>\r\n             <Header as='h1' content=\"Server error\" />\r\n             <Header sub as='h5' color='red' content={commonStore.error?.message}/>\r\n             {\r\n                 commonStore.error?.details && \r\n                 <Segment>\r\n                     <Header as='h4' content='Stack trace' color='teal'/>\r\n                     <code style={{marginTop: '10px'}}>\r\n                         { commonStore.error.details }\r\n                     </code>\r\n                 </Segment> \r\n             }\r\n         </Container>\r\n    )\r\n\r\n};\r\n\r\nexport default observer(ServerError);","import { observer } from \"mobx-react-lite\";\r\nimport { Modal } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\n\r\nfunction  ModalContainer() {\r\n\r\n    const { modalStore } = useStore();\r\n\r\n    return (\r\n\r\n        <Modal \r\n         onClose={modalStore.closeModal}\r\n         open={modalStore.modal.open}\r\n         size='mini'\r\n        >\r\n            <Modal.Content>\r\n                { modalStore.modal.body }\r\n            </Modal.Content >\r\n        </Modal>\r\n    )\r\n};\r\n\r\nexport default observer(ModalContainer);","import { observer } from \"mobx-react-lite\";\r\nimport { Card, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileCard from \"./ProfileCard\";\r\n\r\n\r\nfunction ProfileFollowings() {\r\n\r\n    const { profileStore } = useStore();\r\n\r\n    const { profile, followings, loadingFollowings, activeTab } \r\n          = profileStore;\r\n\r\n \r\n    return (\r\n\r\n        <Tab.Pane\r\n         loading={loadingFollowings}\r\n        >\r\n            <Grid>\r\n                <Grid.Column\r\n                 width={16}\r\n                >\r\n                    <Header\r\n                     floated='left'\r\n                     icon='user'\r\n                     content={ activeTab === 3 ?\r\n                               `People following ${profile?.displayName}` :\r\n                               `People ${profile?.displayName} is following`\r\n                     } \r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column\r\n                 width={16}\r\n                >\r\n                    <Card.Group\r\n                     itemsPerRow={4}\r\n                    >\r\n                        { followings.map(profile => (\r\n                            <ProfileCard \r\n                             key={profile.username}\r\n                             profile={profile}\r\n                            />\r\n                        ))\r\n                        }\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid> \r\n        </Tab.Pane>\r\n    )\r\n};\r\n\r\n\r\nexport default observer(ProfileFollowings);","import React from 'react';\r\nimport { Cropper } from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\r\n    return (\r\n        <Cropper \r\n            src={imagePreview}\r\n            style={{height: 200, width: '100%'}}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n};","import React, { useCallback } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    }\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n            preview: URL.createObjectURL(file)\r\n        })))\r\n    }, [setFiles])\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles} >\r\n            <input {...getInputProps()} />  \r\n            <Icon name='upload' size='huge' />\r\n            <Header content='Drop image here' />\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { Button, Grid, Header } from 'semantic-ui-react';\r\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\r\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n                {files && files.length > 0 &&\r\n                    <>\r\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\r\n                        <Button.Group widths={2}>\r\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                        </Button.Group>\r\n                    </>}\r\n\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport { SyntheticEvent, useState } from 'react';\r\nimport { Button, Card, Grid, Header, Image, Tab } from 'semantic-ui-react';\r\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\r\nimport { Photo, Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nfunction ProfilePhotos({ profile }: Props) {\r\n    const { profileStore: { isCurrentUser, uploadPhoto, \r\n            uploading, loading, setMainPhoto, deletePhoto } } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button floated='right' basic\r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\r\n                    ) : (\r\n                            <Card.Group itemsPerRow={5}>\r\n                                {profile.photos?.map(photo => (\r\n                                    <Card key={photo.id}>\r\n                                        <Image src={photo.url} />\r\n                                        {isCurrentUser && (\r\n                                            <Button.Group fluid widths={2}>\r\n                                                <Button \r\n                                                    basic\r\n                                                    color='green'\r\n                                                    content='Main'\r\n                                                    name={'main' + photo.id}\r\n                                                    disabled={photo.isMain}\r\n                                                    loading={target === 'main' + photo.id && loading}\r\n                                                    onClick={e => handleSetMainPhoto(photo, e)}\r\n                                                />\r\n                                                <Button \r\n                                                    basic \r\n                                                    color='red' \r\n                                                    icon='trash' \r\n                                                    loading={target === photo.id && loading}\r\n                                                    onClick={e => handleDeletePhoto(photo, e)}\r\n                                                    disabled={photo.isMain}\r\n                                                    name={photo.id}\r\n                                                />\r\n                                            </Button.Group>\r\n                                        )}\r\n                                    </Card>\r\n                                ))}\r\n                            </Card.Group>\r\n                        )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n};\r\n\r\nexport default observer(ProfilePhotos);","import { observer } from 'mobx-react-lite';\r\nimport { Tab } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileFollowings from './ProfileFollowings';\r\nimport ProfilePhotos from './ProfilePhotos';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nfunction ProfileContent({profile}: Props) {\r\n\r\n    const { profileStore } = useStore();\r\n\r\n\r\n    const panes = [\r\n        {menuItem: 'About', render: () => <Tab.Pane>About Content</Tab.Pane>},\r\n        {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} />},\r\n        {menuItem: 'Events', render: () => <Tab.Pane>Events Content</Tab.Pane>},\r\n        {menuItem: 'Followers', render: () => <ProfileFollowings/>},\r\n        {menuItem: 'Following', render: () => <ProfileFollowings/>},\r\n    ];\r\n\r\n    return (\r\n        <Tab \r\n            menu={{fluid: true, vertical: true}}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n};\r\n\r\n\r\nexport default observer(ProfileContent);","import { observer } from 'mobx-react-lite';\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nfunction ProfileHeader({profile}: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile}/>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n};\r\n\r\n\r\nexport default observer(ProfileHeader);","import { observer } from 'mobx-react-lite';\r\nimport { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileContent from './ProfileContent';\r\nimport ProfileHeader from './ProfileHeader';\r\n\r\nfunction ProfilePage() {\r\n\r\n    const { username } = useParams<{ username: string }>();\r\n\r\n    const { profileStore } = useStore();\r\n    \r\n    const { loadingProfile, loadProfile, profile, setActiveTab } = profileStore;\r\n\r\n    useEffect(() => {\r\n\r\n        loadProfile(username);\r\n\r\n        return () => setActiveTab(0);\r\n\r\n    }, [loadProfile, username, setActiveTab])\r\n\r\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                    <>\r\n                        <ProfileHeader profile={profile} />\r\n                        <ProfileContent profile={profile} />\r\n                    </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n};\r\n\r\n\r\nexport default observer(ProfilePage);","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> |\r\n               React.ComponentType<any>;\r\n\r\n}\r\n\r\n\r\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\r\n\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n\r\n    return (\r\n\r\n        <Route\r\n         {...rest}\r\n         render={(props) => isLoggedIn ? \r\n               <Component {...props}/> :\r\n               <Redirect to='/' />\r\n        }\r\n        />\r\n    );\r\n};\r\n","import { Fragment } from 'react';\r\nimport { Container } from 'semantic-ui-react';\r\nimport NavBar from './NavBar';\r\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\r\n\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Route, Switch, useLocation } from 'react-router-dom';\r\nimport HomePage from '../../features/home/HomePage';\r\nimport ActivityForm from '../../features/activities/form/ActivityForm';\r\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport NotFound from '../../features/errors/NotFound';\r\nimport ServerError from '../../features/errors/ServerError';\r\nimport { useStore } from '../stores/store';\r\nimport { useEffect } from 'react';\r\nimport LoadingComponent from './LoadingComponent';\r\nimport ModalContainer from '../common/modals/ModalContainer';\r\nimport ProfilePage from '../../features/profiles/ProfilePage';\r\nimport PrivateRoute from './PrivateRoute';\r\n\r\n\r\nfunction App() {\r\n\r\n  const location = useLocation();\r\n\r\n  const { commonStore, userStore } = useStore();\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    if (commonStore.token){\r\n\r\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\r\n    \r\n    } else {\r\n\r\n      commonStore.setAppLoaded();\r\n    }\r\n  },[commonStore, userStore]);\r\n\r\n\r\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\r\n\r\n\r\n  return (\r\n    <Fragment>\r\n      <ModalContainer />\r\n     <Route exact path='/' component={ HomePage }/>\r\n     <Route \r\n      path={'/(.+)'} \r\n      render={() => (\r\n        <>\r\n        <ToastContainer position='bottom-right' hideProgressBar/>\r\n          <NavBar />\r\n          <Container style={{marginTop: '7em'}}>\r\n            <Switch>\r\n             <PrivateRoute exact path='/activities' component={ ActivityDashboard }/>\r\n             <PrivateRoute path='/activities/:id' component={ ActivityDetails }/>\r\n             <PrivateRoute key={ location.key } path={['/new', '/manage/:id']} component={ ActivityForm }/>\r\n             <PrivateRoute path='/profiles/:username' component={ProfilePage} />\r\n             <PrivateRoute path='server-error' component={ ServerError }/>\r\n             <Route component={ NotFound }/>\r\n             </Switch>\r\n          </Container> \r\n        </>\r\n      )}\r\n     />\r\n\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default observer(App);\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n\r\n    window.scrollTo(0, 0);\r\n    \r\n  }, [pathname]);\r\n\r\n  return null;\r\n};","import ReactDOM from 'react-dom';\r\nimport './app/layout/styles.css';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport 'react-toastify/dist/ReactToastify.min.css';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport App from './app/layout/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { StoreContext, store } from './app/stores/store';\r\nimport { Router } from 'react-router-dom';\r\nimport { createBrowserHistory } from 'history';\r\nimport ScrollToTop from './app/layout/ScrollToTop';\r\n\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n\r\n  <StoreContext.Provider value={ store }>\r\n    <Router history={ history }>\r\n    <ScrollToTop/>  \r\n      <App />,\r\n    </Router>\r\n  </StoreContext.Provider>,\r\n    document.getElementById('root')\r\n  \r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}