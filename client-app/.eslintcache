[{"E:\\Reactivities\\client-app\\src\\index.tsx":"1","E:\\Reactivities\\client-app\\src\\reportWebVitals.ts":"2","E:\\Reactivities\\client-app\\src\\app\\stores\\store.ts":"3","E:\\Reactivities\\client-app\\src\\app\\layout\\App.tsx":"4","E:\\Reactivities\\client-app\\src\\app\\stores\\activityStore.ts":"5","E:\\Reactivities\\client-app\\src\\app\\stores\\userStore.ts":"6","E:\\Reactivities\\client-app\\src\\app\\stores\\modalStore.ts":"7","E:\\Reactivities\\client-app\\src\\app\\stores\\commonStore.ts":"8","E:\\Reactivities\\client-app\\src\\app\\layout\\NavBar.tsx":"9","E:\\Reactivities\\client-app\\src\\app\\layout\\LoadingComponent.tsx":"10","E:\\Reactivities\\client-app\\src\\features\\home\\HomePage.tsx":"11","E:\\Reactivities\\client-app\\src\\features\\errors\\NotFound.tsx":"12","E:\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetails.tsx":"13","E:\\Reactivities\\client-app\\src\\features\\errors\\ServerError.tsx":"14","E:\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx":"15","E:\\Reactivities\\client-app\\src\\features\\activities\\form\\ActivityForm.tsx":"16","E:\\Reactivities\\client-app\\src\\app\\common\\modals\\ModalContainer.tsx":"17","E:\\Reactivities\\client-app\\src\\app\\api\\agent.ts":"18","E:\\Reactivities\\client-app\\src\\app\\common\\options\\categoryOptions.ts":"19","E:\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedChat.tsx":"20","E:\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedSidebar.tsx":"21","E:\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx":"22","E:\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedHeader.tsx":"23","E:\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityFilters.tsx":"24","E:\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedInfo.tsx":"25","E:\\Reactivities\\client-app\\src\\features\\users\\LoginForm.tsx":"26","E:\\Reactivities\\client-app\\src\\features\\users\\RegisterForm.tsx":"27","E:\\Reactivities\\client-app\\src\\app\\common\\form\\ReuseTextInput.tsx":"28","E:\\Reactivities\\client-app\\src\\app\\common\\form\\ReuseDateInput.tsx":"29","E:\\Reactivities\\client-app\\src\\app\\common\\form\\ReuseSelectInput.tsx":"30","E:\\Reactivities\\client-app\\src\\app\\common\\form\\ReuseTextArea.tsx":"31","E:\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityListItem.tsx":"32","E:\\Reactivities\\client-app\\src\\features\\errors\\ValidationErrors.tsx":"33","E:\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityListItemAttendee.tsx":"34","E:\\Reactivities\\client-app\\src\\app\\models\\profile.ts":"35","E:\\Reactivities\\client-app\\src\\app\\models\\activity.ts":"36","E:\\Reactivities\\client-app\\src\\features\\profiles\\ProfileCard.tsx":"37"},{"size":967,"mtime":1625065760746,"results":"38","hashOfConfig":"39"},{"size":425,"mtime":499162500000,"results":"40","hashOfConfig":"39"},{"size":676,"mtime":1625158723253,"results":"41","hashOfConfig":"39"},{"size":2099,"mtime":1625207909728,"results":"42","hashOfConfig":"39"},{"size":6875,"mtime":1625255743535,"results":"43","hashOfConfig":"39"},{"size":1757,"mtime":1625167875698,"results":"44","hashOfConfig":"39"},{"size":517,"mtime":1625207809913,"results":"45","hashOfConfig":"39"},{"size":942,"mtime":1625167960664,"results":"46","hashOfConfig":"39"},{"size":1911,"mtime":1625155654221,"results":"47","hashOfConfig":"39"},{"size":388,"mtime":1624963315218,"results":"48","hashOfConfig":"39"},{"size":1905,"mtime":1625207408546,"results":"49","hashOfConfig":"39"},{"size":581,"mtime":1624985784761,"results":"50","hashOfConfig":"39"},{"size":1436,"mtime":1625251069926,"results":"51","hashOfConfig":"39"},{"size":848,"mtime":1624988666221,"results":"52","hashOfConfig":"39"},{"size":1101,"mtime":1624968851369,"results":"53","hashOfConfig":"39"},{"size":5203,"mtime":1625255195597,"results":"54","hashOfConfig":"39"},{"size":536,"mtime":1625166498491,"results":"55","hashOfConfig":"39"},{"size":3248,"mtime":1625254117254,"results":"56","hashOfConfig":"39"},{"size":269,"mtime":1625064048708,"results":"57","hashOfConfig":"39"},{"size":2420,"mtime":1624967738134,"results":"58","hashOfConfig":"39"},{"size":2127,"mtime":1625250999025,"results":"59","hashOfConfig":"39"},{"size":1013,"mtime":1624970249274,"results":"60","hashOfConfig":"39"},{"size":3901,"mtime":1625256442207,"results":"61","hashOfConfig":"39"},{"size":693,"mtime":1624970265400,"results":"62","hashOfConfig":"39"},{"size":1732,"mtime":1625067476580,"results":"63","hashOfConfig":"39"},{"size":1855,"mtime":1625207609767,"results":"64","hashOfConfig":"39"},{"size":2522,"mtime":1625207269054,"results":"65","hashOfConfig":"39"},{"size":764,"mtime":1625139912498,"results":"66","hashOfConfig":"39"},{"size":891,"mtime":1625068785994,"results":"67","hashOfConfig":"39"},{"size":1060,"mtime":1625063796883,"results":"68","hashOfConfig":"39"},{"size":765,"mtime":1625062915958,"results":"69","hashOfConfig":"39"},{"size":3205,"mtime":1625257562221,"results":"70","hashOfConfig":"39"},{"size":697,"mtime":1625161034871,"results":"71","hashOfConfig":"39"},{"size":1299,"mtime":1625257447264,"results":"72","hashOfConfig":"39"},{"size":364,"mtime":1625252479597,"results":"73","hashOfConfig":"39"},{"size":1182,"mtime":1625254341711,"results":"74","hashOfConfig":"39"},{"size":993,"mtime":1625257182834,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"15wpli6",{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"78"},"E:\\Reactivities\\client-app\\src\\index.tsx",[],["156","157"],"E:\\Reactivities\\client-app\\src\\reportWebVitals.ts",[],"E:\\Reactivities\\client-app\\src\\app\\stores\\store.ts",[],"E:\\Reactivities\\client-app\\src\\app\\layout\\App.tsx",[],"E:\\Reactivities\\client-app\\src\\app\\stores\\activityStore.ts",["158"],"import format from \"date-fns/format\";\r\nimport { makeAutoObservable } from \"mobx\";\r\nimport { runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { store, useStore } from \"./store\";\r\n\r\n\r\nexport default class ActivityStore {\r\n    \r\n    activityRegister = new Map<string, Activity>();\r\n\r\n    chosenActivity: Activity | undefined = undefined;\r\n\r\n    editMode = false;\r\n\r\n    loading = false;\r\n\r\n    loadingInitial = false;\r\n\r\n    \r\n    constructor() {\r\n        \r\n        makeAutoObservable(this);\r\n    }\r\n\r\n\r\n    get activitiesByDate(){\r\n\r\n        return Array.from(this.activityRegister.values()).sort((a,b) => \r\n\r\n            (a.date!.getTime()) - (b.date!.getTime())\r\n        );\r\n    }\r\n\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!,'dd MMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as {[key: string]: Activity[]})\r\n        )\r\n    }\r\n\r\n\r\n    loadActivity = async (id: string) => {\r\n\r\n        let activity = this.getActivity(id);\r\n\r\n        if (activity) {\r\n\r\n            this.chosenActivity = activity;\r\n\r\n            return activity;\r\n\r\n        } else {\r\n\r\n            this.loadingInitial = true;\r\n\r\n            try {\r\n\r\n                activity = await agent.activities.activityDetails(id);\r\n\r\n                this.setActivity(activity);\r\n\r\n                runInAction(() => {\r\n\r\n                    this.chosenActivity = activity;\r\n                });\r\n\r\n                this.setLoadingInitial(false);\r\n\r\n                return activity;\r\n                \r\n            } catch (error) {\r\n\r\n                console.log(error);\r\n\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private getActivity(id: string) {\r\n\r\n        return this.activityRegister.get(id);\r\n    }\r\n\r\n\r\n    private setActivity(activity: Activity) {\r\n\r\n        const user = store.userStore.user;\r\n\r\n        if (user) {\r\n            \r\n            activity.isGoing = activity.attendees!.some(\r\n                a => a.username === user.username\r\n            );\r\n\r\n            activity.isHost = activity.hostUsername === user.username;\r\n\r\n            activity.host = activity.attendees?.find (\r\n\r\n                x => x.username === activity.hostUsername\r\n            );\r\n        }\r\n\r\n\r\n        activity.date = new Date(activity.date!);\r\n        \r\n        this.activityRegister.set(activity.id, activity);\r\n    }   \r\n\r\n\r\n    loadActivities = async () => {\r\n\r\n         this.loadingInitial = true;\r\n\r\n         try {\r\n\r\n            const activities = await agent.activities.list();\r\n\r\n            runInAction(() => {\r\n                \r\n                activities.forEach(activity => {\r\n\r\n                    this.setActivity(activity);\r\n                });\r\n\r\n                this.loadingInitial = false;\r\n            });\r\n        }\r\n        catch(error) {\r\n\r\n            console.log(error);\r\n\r\n            runInAction(() => { this.loadingInitial = false; });\r\n        }\r\n    };\r\n\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n\r\n        const user = store.userStore.user;\r\n\r\n        const attendee = new Profile(user!);\r\n\r\n        try {\r\n\r\n            await agent.activities.create(activity);\r\n\r\n            const newActivity = new Activity(activity);\r\n\r\n            newActivity.hostUsername = user!.username;\r\n\r\n            newActivity.attendees = [attendee];\r\n\r\n            this.setActivity(newActivity);\r\n\r\n            runInAction(() => {\r\n\r\n                this.chosenActivity = newActivity;\r\n\r\n            });\r\n\r\n        } catch (error) {\r\n\r\n            console.log(error);\r\n\r\n        }\r\n    };\r\n\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n\r\n        try {\r\n\r\n            await agent.activities.update(activity);\r\n\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n\r\n                    let updatedActivity = {...this.getActivity(activity.id),...activity};\r\n\r\n                    this.activityRegister.set(activity.id, updatedActivity as Activity);\r\n\r\n                    this.chosenActivity = updatedActivity as Activity;\r\n                }\r\n            });\r\n \r\n        } catch (error) {\r\n\r\n            console.log(error);\r\n            \r\n        }\r\n    };\r\n\r\n\r\n    deleteActivity = async(id: string) => {\r\n\r\n        \r\n        this.loading = true;\r\n\r\n        try {\r\n\r\n            await agent.activities.delete(id);\r\n\r\n            runInAction(() => {\r\n\r\n                this.activityRegister.delete(id);\r\n\r\n                this.loading = false;\r\n            });\r\n            \r\n        } catch (error) {\r\n\r\n            console.log(error);\r\n            \r\n            runInAction(() => {\r\n                \r\n                this.loading = false;\r\n            });\r\n        }\r\n\r\n\r\n    };\r\n\r\n\r\n    updateAttendance = async() => {\r\n\r\n        const user = store.userStore.user;\r\n\r\n        this.loading = true;\r\n\r\n        try {\r\n\r\n            await agent.activities.attend(this.chosenActivity?.id!)\r\n\r\n            runInAction(() => {\r\n                \r\n                if (this.chosenActivity?.isGoing) {\r\n\r\n                    this.chosenActivity.attendees = \r\n                        this.chosenActivity.attendees?.filter(\r\n                            a => a.username !== user?.username\r\n                        );\r\n                    \r\n                    this.chosenActivity.isGoing = false;\r\n\r\n                } else {\r\n\r\n                    const attendee = new Profile(user!);\r\n\r\n                    this.chosenActivity?.attendees?.push(attendee);\r\n\r\n                    this.chosenActivity!.isGoing = true;\r\n                }\r\n\r\n                this.activityRegister.set(this.chosenActivity!.id, this.chosenActivity!);\r\n            });\r\n            \r\n        } catch (error) {\r\n\r\n            console.log(error);\r\n            \r\n        } finally {\r\n\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    };\r\n\r\n\r\n    cancelActivityToggle = async () => {\r\n\r\n        this.loading = true;\r\n\r\n        try {\r\n\r\n            await agent.activities.attend(this.chosenActivity!.id);\r\n\r\n            runInAction(() => {\r\n\r\n                this.chosenActivity!.isCancelled = !this.chosenActivity!.isCancelled;\r\n\r\n                this.activityRegister.set(this.chosenActivity!.id, this.chosenActivity!);\r\n            });\r\n            \r\n        } catch (error) {\r\n\r\n            console.log(error);\r\n        \r\n        } finally {\r\n\r\n            runInAction(() => this.loading = false);\r\n        }\r\n\r\n    };\r\n};","E:\\Reactivities\\client-app\\src\\app\\stores\\userStore.ts",[],"E:\\Reactivities\\client-app\\src\\app\\stores\\modalStore.ts",[],"E:\\Reactivities\\client-app\\src\\app\\stores\\commonStore.ts",[],"E:\\Reactivities\\client-app\\src\\app\\layout\\NavBar.tsx",[],"E:\\Reactivities\\client-app\\src\\app\\layout\\LoadingComponent.tsx",[],"E:\\Reactivities\\client-app\\src\\features\\home\\HomePage.tsx",[],"E:\\Reactivities\\client-app\\src\\features\\errors\\NotFound.tsx",[],"E:\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetails.tsx",[],"E:\\Reactivities\\client-app\\src\\features\\errors\\ServerError.tsx",[],"E:\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx",[],"E:\\Reactivities\\client-app\\src\\features\\activities\\form\\ActivityForm.tsx",["159","160","161"],"import { observer } from 'mobx-react-lite';\r\nimport { useEffect } from 'react';\r\nimport {  useState } from 'react';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport ReuseTextInput from '../../../app/common/form/ReuseTextInput';\r\nimport ReuseTextArea from '../../../app/common/form/ReuseTextArea';\r\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\r\nimport ReuseSelectInput from '../../../app/common/form/ReuseSelectInput';\r\nimport ReuseDateInput from '../../../app/common/form/ReuseDateInput';\r\nimport { Activity, ActivityFormValues } from '../../../app/models/activity';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { act } from 'react-dom/test-utils';\r\n\r\n\r\n\r\nfunction ActivityForm() {\r\n\r\n    const { activityStore } = useStore();\r\n\r\n    const history = useHistory();\r\n\r\n    const { createActivity, \r\n        updateActivity, \r\n        loading,\r\n        loadActivity,\r\n        loadingInitial\r\n      } = activityStore;\r\n\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('Activity title is mandatory'),\r\n        description: Yup.string().required('Activity description is mandatory'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        city: Yup.string().required(),\r\n        venue: Yup.string().required()\r\n    })\r\n\r\n\r\n    const [activity, setActivity] = \r\n            useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if (id) {\r\n\r\n            loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)));\r\n        }\r\n\r\n    }, [id, loadActivity]);\r\n\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`))\r\n        } else {\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\r\n        }\r\n    }\r\n\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading activity...' />;\r\n\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity details' sub color='teal' />\r\n            <Formik\r\n             validationSchema={validationSchema} \r\n             enableReinitialize \r\n             initialValues={activity} \r\n             onSubmit={values => handleFormSubmit(values)}>\r\n                {\r\n                    ({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n\r\n                        <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                            <ReuseTextInput\r\n                             name='title'\r\n                             placeholder='Title' \r\n                            />\r\n                            <ReuseTextArea rows={4}\r\n                                placeholder='Description'\r\n                                name='description'\r\n                            />\r\n                            <ReuseSelectInput options={categoryOptions}\r\n                                placeholder='Category'\r\n                                name='category'\r\n                            />\r\n                            <ReuseDateInput\r\n                                placeholderText='Date'\r\n                                name='date'\r\n                                showTimeSelect\r\n                                timeCaption='time'\r\n                                dateFormat='MMMM d, yyyy h:mm a'\r\n                            />\r\n                            <Header content='Location details' sub color='teal' />\r\n                            <ReuseTextInput\r\n                                placeholder='City'\r\n                                name='city'\r\n                            />\r\n                            <ReuseTextInput\r\n                                placeholder='Venue'\r\n                                name='venue'\r\n                            />\r\n                            <Button\r\n                                floated='right'\r\n                                positive\r\n                                type='submit'\r\n                                content='Sumbit'\r\n                                loading={isSubmitting}\r\n                            />\r\n                            <Button\r\n                                disabled={isSubmitting || !isValid || !dirty }\r\n                                floated='right'\r\n                                type='button'\r\n                                content='Cancel'\r\n                                as={Link} to='/activities'\r\n                            />\r\n                        </Form>\r\n                    )\r\n                }\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n};\r\n\r\n\r\nexport default observer(ActivityForm);","E:\\Reactivities\\client-app\\src\\app\\common\\modals\\ModalContainer.tsx",[],"E:\\Reactivities\\client-app\\src\\app\\api\\agent.ts",[],"E:\\Reactivities\\client-app\\src\\app\\common\\options\\categoryOptions.ts",[],"E:\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedChat.tsx",[],"E:\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedSidebar.tsx",[],"E:\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx",[],"E:\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedHeader.tsx",[],"E:\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityFilters.tsx",[],"E:\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedInfo.tsx",[],"E:\\Reactivities\\client-app\\src\\features\\users\\LoginForm.tsx",[],"E:\\Reactivities\\client-app\\src\\features\\users\\RegisterForm.tsx",[],"E:\\Reactivities\\client-app\\src\\app\\common\\form\\ReuseTextInput.tsx",[],"E:\\Reactivities\\client-app\\src\\app\\common\\form\\ReuseDateInput.tsx",[],"E:\\Reactivities\\client-app\\src\\app\\common\\form\\ReuseSelectInput.tsx",[],"E:\\Reactivities\\client-app\\src\\app\\common\\form\\ReuseTextArea.tsx",[],"E:\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityListItem.tsx",["162"],"import format from \"date-fns/format\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport { Button, Icon, Item, Label, Segment } from \"semantic-ui-react\";\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport ActivityListItemAttendee from \"./ActivityListItemAttendee\";\r\n\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\n\r\nexport default function ActivityListItem({ activity } : Props) {\r\n\r\n  \r\n    return (\r\n        \r\n        <Segment.Group>\r\n            <Segment>\r\n                {\r\n                    activity.isCancelled && \r\n                    <Label \r\n                     attached='top'\r\n                     color='red'\r\n                     content='Cancelled'\r\n                     style={{textAlign: 'center'}}\r\n                    />\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image\r\n                         style={{marginBottom: 3}}\r\n                         size='tiny' \r\n                         circular\r\n                         src='/assets/user.png'\r\n                        />\r\n                        <Item.Content>\r\n                            <Item.Header \r\n                             as={ Link }\r\n                             to={`/activities/${activity.id}`}\r\n                            >\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>\r\n                                Hosted by {activity.host?.diplayName}\r\n                            </Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                <Label basic color='green'>\r\n                                        You are going to this event\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock'/> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon name='marker'/> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{ activity.description }</span>\r\n                <Button \r\n                 as={ Link }\r\n                 to={`/activities/${activity.id}`}\r\n                 color='teal'\r\n                 floated='right'\r\n                 content='View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n};","E:\\Reactivities\\client-app\\src\\features\\errors\\ValidationErrors.tsx",[],"E:\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityListItemAttendee.tsx",[],"E:\\Reactivities\\client-app\\src\\app\\models\\profile.ts",[],"E:\\Reactivities\\client-app\\src\\app\\models\\activity.ts",["163"],"import { isConstructorDeclaration } from \"typescript\";\r\nimport { Profile } from \"./profile\";\r\n\r\nexport interface Activity { \r\n id: string;\r\n title: string;\r\n date: Date | null;\r\n description: string;\r\n category: string;\r\n city: string;\r\n venue: string;\r\n hostUsername: string;\r\n isCancelled: boolean;\r\n isGoing: boolean;\r\n isHost: boolean;\r\n host?: Profile;\r\n attendees: Profile[];\r\n};\r\n\r\nexport class Activity implements Activity {\r\n\r\n    constructor(init?: ActivityFormValues) {\r\n\r\n        Object.assign(this, init);\r\n    }\r\n\r\n};\r\n\r\n\r\nexport class ActivityFormValues {\r\n\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n\r\n    constructor(activity?: ActivityFormValues) \r\n    {\r\n        if (activity) {\r\n\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.category = activity.category;\r\n            this.description = activity.description;\r\n            this.date = activity.date;\r\n            this.venue = activity.venue;\r\n            this.city = activity.city;\r\n\r\n\r\n        }\r\n\r\n    }\r\n}","E:\\Reactivities\\client-app\\src\\features\\profiles\\ProfileCard.tsx",["164"],"import { observer } from \"mobx-react-lite\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Icon, Image } from \"semantic-ui-react\";\r\nimport { isConditionalExpression } from \"typescript\";\r\nimport { Profile } from \"../../app/models/profile\";\r\n\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\n\r\nfunction ProfileCard({profile}: Props) {\r\n\r\n    return (\r\n\r\n        <Card \r\n         as={Link}\r\n         to={`/profiles/${profile.username}`}\r\n        >\r\n          <Image \r\n           src={profile.image || '/assets/user.png'}\r\n          />\r\n          <Card.Content >\r\n              <Card.Header>\r\n                  { profile.diplayName }\r\n              </Card.Header>\r\n              <Card.Description>\r\n                  Bio goes here\r\n              </Card.Description>\r\n          </Card.Content>\r\n          <Card.Content extra>\r\n            <Icon name='user' />\r\n             20 followers\r\n          </Card.Content>\r\n        </Card>\r\n\r\n    )\r\n};\r\n\r\n\r\nexport default observer(ProfileCard);",{"ruleId":"165","replacedBy":"166"},{"ruleId":"167","replacedBy":"168"},{"ruleId":"169","severity":1,"message":"170","line":7,"column":17,"nodeType":"171","messageId":"172","endLine":7,"endColumn":25},{"ruleId":"169","severity":1,"message":"173","line":15,"column":10,"nodeType":"171","messageId":"172","endLine":15,"endColumn":18},{"ruleId":"169","severity":1,"message":"174","line":17,"column":10,"nodeType":"171","messageId":"172","endLine":17,"endColumn":13},{"ruleId":"169","severity":1,"message":"175","line":29,"column":9,"nodeType":"171","messageId":"172","endLine":29,"endColumn":16},{"ruleId":"169","severity":1,"message":"176","line":2,"column":16,"nodeType":"171","messageId":"172","endLine":2,"endColumn":24},{"ruleId":"169","severity":1,"message":"177","line":1,"column":10,"nodeType":"171","messageId":"172","endLine":1,"endColumn":34},{"ruleId":"169","severity":1,"message":"178","line":4,"column":10,"nodeType":"171","messageId":"172","endLine":4,"endColumn":33},"no-native-reassign",["179"],"no-negated-in-lhs",["180"],"@typescript-eslint/no-unused-vars","'useStore' is defined but never used.","Identifier","unusedVar","'Activity' is defined but never used.","'act' is defined but never used.","'loading' is assigned a value but never used.","'Redirect' is defined but never used.","'isConstructorDeclaration' is defined but never used.","'isConditionalExpression' is defined but never used.","no-global-assign","no-unsafe-negation"]